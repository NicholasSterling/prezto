# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...

bindkey -v

autoload zed

########## Interactive tools

# Ask a y/n question and succeed if y.
# e.g.   ask Delete $file && rm $file
#        ask -n Delete $file && rm $file  # defaults to n
ask() {
  local default
  local response
  [ "$1" = -y ] && default=y && shift
  [ "$1" = -n ] && default=n && shift
  echo ""
  while :; do
    echo -n "$@"'? '
    [ "$default" ] && echo -n "($default) "
    read -q yn
    echo ""
    [ "$yn" = $'\n' ] && yn="$default"
    [ "$yn" = y ] && return 0
    [ "$yn" = n ] && return 1
    echo "Please enter y or n"
  done
}

########## Basics

alias a=alias

a \?='noglob whence -vafsm'

a fn='zed -f'
compctl -F fn

a rmb='rm *~'
a rmrb='rm **/*~'

a dos2unix=fromdos

a cx='chmod +x'

a wsdiff='sdiff -w179'

a nobuf='stdbuf -oL'  # actually, it's still buffered by line

setenv() { export $1="$2" }     # for compatibility with simple csh scripts

say+do() { echo "$@"; "$@" }            # say it, then do it
warn()   { echo "$@" 1>&2 }             # say to stderr

diskhogs() { du -ak | sed -n '/^[0-9]\{3\}/p' | sort -rn | $PAGER }
 cpuhogs() { ps -eo pcpu,pid,user,comm        | sort -rn | $PAGER }

psg() { ps -ef | egrep  "$@|UID" | grep -v grep }

a col='cut -d\  -f'  # overrides useless /usr/bin/col

########## .z* Files

a  .z='. ~/.{zprofile,zshenv,zshrc}'
a e.z='e ~/.{zprofile,zshenv,zshrc}'
a e.p='e ~/.zprofile'
a e.c='e ~/.zshrc'
a e.v='e ~/.zshenv'

########## History stuff

a h='history -iD'
a gethistory='fc -RI'
a -g ,o='$(eval `fc -ln -1`)'  # output of last cmd (which gets re-executed)

########## Line stuff

a lines='print -lr'

a num='nl -ba'

# Show just the specified (by number) line.
line() {
  local num
  num=$1 shift
  sed -ne "${num}p" "$@"
}

# Grab selections to make a doc.
got=$HOME/got
grab() {
  local x
  echo "Output in \$got:  l = add horizontal line,  q = quit,  g = add X selection, whatever = add whatever"
  while :; do
    read x
    case "$x" in
      l) >&1 >&3 echo '================================================================================';;
      g) >&1 >&3 xsel;;
      q) break;;
      *) >&3 echo "$x";;
    esac
  done 3>$got
}

########## Directory stuff

# cd to a directory, creating it if it doesn't exist.
md () { mkdir "$1"            }
md.() { mkdir "$1" && cd "$1" }

# nd names a directory; cnd cd's to a named directory.
 nd() { export $1="${2:-PWD}"; : ~$1 }
cnd() { cd "$1" }
compctl -n cnd

# ls stuff
a lf='ls -CFbh'
a ll='ls -CFbhla'

# TREE stuff
a td='tree -d'         # just the dirs
a tf='tree -FC'        # all file types
a tm='noglob tf -P'    # ..     matching this pattern
a tn='noglob tf -I'    # .. not matching this pattern

# Edit a var or the current directory.  Edit path as lines.
v() {
  if [ $# = 1 ]; then
    if [ $1 = path ]; then
      local lpath
      lpath=$( path )
      vared lpath
      path=( "${=lpath}" )
    else
      vared $1
    fi
  else  # default is PWD
    local dir
    dir="$PWD"
    vared dir
    cd "$dir"
  fi
}
compctl -v v

# List previous directories and let me pick one.
pd() {
  dirs -v
  echo -n ' # '
  local num
  read -k num
  echo ''
  [ "$num" = $'\n' ] && num=1
  [ "$num" = 0 ] || pushd +$num
}

# Warp to a similar directory -- one path component replaced.
wd() { cd "$1" "$2" }
wd_completions1() { reply=(`echo $PWD | sed 's:/: :g'`); }
wd_completions2() {
	local cmd arg1 rest
	read -c cmd arg1 rest
#	echo arg1 $arg1 >/dev/console
	prefix="${PWD%%${arg1}*}"
	reply=(`ls -d "$prefix"*(-/) | sed -e 's:/$::' -e 's:.*/::'`)
}
compctl -x 'p[1]' -K wd_completions1 - 'p[2]' -K wd_completions2 -- wd

# . with args sources them all.  Could do something special if no args.
. () {
  if [ $# = 0 ]; then
    echo ". what?"
  else
    local f
    for f; builtin . "$f"
  fi
}

# Path display/manipulation.  See also 'v path'
path() { lines $path }
+path() { PATH="$1:$PATH"; path }
path+() { PATH="$PATH:$1"; path }

########## Time stuff

 dateInSecs() { date +%s }
 secsToDate() {      date -d @$1                            '+%Y-%m-%d %H:%M:%S' }
msecsToDate() { d=$( date -d @$( echo $1 | sed 's/...$//' ) '+%Y-%m-%d %H:%M:%S' ); echo $d.$( echo $1 | sed 's/.*\(...\)/\1/' ) }

########## Archive stuff

function grepJars {
  what=`echo "$1" | sed s:\\\\.:/:g`
  for jar in ${2:-**/*.jar}; do
    output=`jar tf $jar | grep "$what"` && echo "  *** $jar ***\\n$output"
  done
}

########## Misc

# Generate some lines of test data.
tst() {
  local i
  for i in {1..${1:-5}}; echo $i{0..9}
}

# Insert a line before the specified line.
# e.g.  cat foo | before_line 7 This line was inserted.
before_line() {
  local n
  n="$1"
  shift
  sed "$n i\
$*"
}

a ports="lsof -i"

# stdjoin handles a typical case of joining two files, e.g.
# stdjoin /etc/{passwd,shadow} 1,3,4 1,2 :
# stdjoin File1 File2 Cols1 [ Cols2 [ Delim [KeyCols] ] ]
# defaults:                   Cols1     ,       1
stdjoin () {
  if (( $# < 3 )); then
    usage "stdjoin File1 File2 Cols1 [ Cols2 [ Delim [KeyCols] ] ]"
    return 1
  fi
  local delim=${5:-,} 
  join -t $delim -j ${6:-1} \
    <( cut -d $delim -f $3       $1 | sort ) \
    <( cut -d $delim -f ${4:-$3} $2 | sort )
}


# Convert ... to ../.. and so on.
rationalise-dot() {
  if [[ $LBUFFER = *.. ]]; then
    LBUFFER+=/..
  else
    LBUFFER+=.
  fi
}
zle -N rationalise-dot
bindkey . rationalise-dot


########## Curl stuff; this should probably be moved out of here

# curl with cookie jar; put/post @file or string
export CU_URL=http://localhost:8080
export CU_JAR=~/.cookie_jar
cu-to  () { export CU_URL=http://${1-localhost}:8080; export CU_JAR=${2-~/.cookie_jar}; }
cu-url () { CU_URL="$1"; }
cu-jar () { CU_JAR="$1"; }
cu-put () { local x="$1"; shift; cu_ "$@" -X PUT -d "$x"; }
cu-post() { local x="$1"; shift; cu_ "$@"        -d "$x"; }
cu-del () {                      cu_ "$@" -X DELETE     ; }
cu-new () {
    rm -f   "$CU_JAR"
    curl -c "$CU_JAR" "$CU_URL/j_acegi_security_check?j_username=${1-admin}&j_password=${2:-changeme}"
}
cu-yaml_   () {
    local url="$CU_URL/$1"
    shift
    curl -b "$CU_JAR" \
         -H 'Content-Type: application/yaml' \
         -H       'Accept: application/yaml' \
         "$url" "$@"
}
cu-csv_   () {
    local url="$CU_URL/$1"
    shift
    curl -b "$CU_JAR" \
         -H       'Accept: application/csv' \
         "$url" "$@"
}
cu-text_   () {
    local url="$CU_URL/$1"
    shift
    curl -b "$CU_JAR" \
         -H       'Accept: text/plain' \
         "$url" "$@"
}
cu_() {
    local url="$CU_URL/$1"
    shift
    curl -b "$CU_JAR" "$url" "$@"
}
a cu-yaml=" noglob cu-yaml_ "
a cu-csv="  noglob cu-csv_  "
a cu-text=" noglob cu-text_ "
cu-help() {
<<EOF cat

CU_URL = $CU_URL
CU_JAR = $CU_JAR
cu-to lmyun2 /tmp/cookiejar
cu-new
cu-yaml Path/vm1?depth=3
cu-put 'status: RUNNING' Path/vm1
cu-post "{ name: iie, type: Container }" Path/
cu-del Path/vm1
cu-csv Metrics/Vm?begin=2011-03-01

You can use @file instead of literal data.

EOF
}

########## SASI stuff (curl part broken now because of SSL)

 task() { curl           -sD -         $sc_url/Task/$1 ; }
 getP() { curl           -sD -         $sc_url/Path$1  ; }
postP() { curl           -sD - -d "$2" $sc_url/Path$1  ; }
 putP() { curl -X PUT    -sD - -d "$2" $sc_url/Path$1  ; }
 delP() { curl -X DELETE -sD -         $sc_url/Path$1  ; }
 dump() { curl           -sD -         $sc_url/Dump    ; }

# sk kills SASI jobs (core.Boot).
sk() { kill $(
  psg java | fgrep core.Boot | col 2
) }

# Shows a subset of the available events.
a eventgrep='nobuf events | grep'

########## A calculator using (( ))

# e.g.
#     , 3.5 * 8
#     / 7
#     z / ( z + 1 )
#     -
# For trig, rand, more:  zmodload zsh/mathfunc

typeset -F z=0.0
a calc='noglob calc_'
calc_() {
    if [ $# = 2 ]; then
      [ "$2" = \+ ] && set -- "$1" \+ "$1"   #  3 +  =>    3 + 3
      [ "$2" = \- ] && set -- 0.0  \- "$1"   #  3 -  =>  0.0 - 3
      [ "$2" = \* ] && set -- "$1" \* "$1"   #  3 *  =>    3 * 3
      [ "$2" = \/ ] && set -- 1.0  \/ "$1"   #  3 /  =>  1.0 / 3
    fi
    (( z = $* ))
    echo $z | sed -e 's/0*$//' -e 's/\.$//'
}
a      ,='calc'
a      z='calc z'
a      0='calc 0.0'
a      1='calc 1.0'
a      2='calc 2.0'
a -- '+'='calc z +'
a -- '-'='calc z -'
a -- '*'='calc z *'
a -- '/'='calc z /'
int() {    # z = $1 (or $z) converted to an integer
  local int
  declare -i 10 int
  int=${1-z}
  calc $int
}
round() {    # z = $1 (or $z) rounded to nearest integer
  local int
  declare -i 10 int
  (( int = ${1-z} + .5 ))
  calc $int
}
16() {    # print $1 (or $z) in hex
  local int
  declare -i 16 int
  int=${1-$z}
  echo $int
}
  
########## Git stuff

a git_sasi=' git clone git@github.com:Coraid/sasi.git '

# Commit staged changes with the JIRA magic to close an issue.
function gjc {   # e.g. gjc 219 Blah blah blah
  local nnn=$1
  shift
  say+do git commit -m "USM-$nnn #resolve $*"
}

# Commit staged and unstaged changes with the JIRA magic to close an issue.
function gjca {   # e.g. gjca 219 Blah blah blah
  local nnn=$1
  shift
  say+do git commit -am "USM-$nnn #resolve $*"
}

########## Key bindings

# Binds a key to both vi modes.
bindvi() {
  local map
  for map in viins vicmd
  bindkey -M $map $1 $2
}

bindvi  '' push-input
bindvi  '' describe-key-briefly
bindvi  '^H' run-help
bindvi  '^U' vi-kill-line
bindvi  '^N' accept-and-infer-next-history

bindkey '^O' accept-and-menu-complete

keys() { <<EOF

Some interesting keys:

  ^\  stashes input, letting you type another command first
  ^/  describes next key
  ^H  shows help for this command
  ^W  erase previous word (in insert mode)
  ^O  accept item (during menu completion with ^I)
  ^N  execute and infer next history
  ^U  kill line

See also:
  bindkey
  man zshzle

EOF
}

